---
title: "Generative Art Assignment"
date: 06/11/2024
author: "Rebecca-Jane Gullette"
format: html
---
# Getting Started

```{r}
#loading packages 
library(ggplot2) # making visualizations
library(tibble) # data representation
#color palettes
library(scales) 
library(ggthemes)

# data
mpg
```

## Exercise 1. Artwork using ggplot2 and mpg data set

```{r}
mpg %>% # pipe data to plotting 
  ggplot(aes(cty, class, color = drv)) + # input data as base for art
  geom_point(show.legend = FALSE, size = 4, shape = 8) + # creating star points
  geom_point(show.legend = FALSE, size = 2, shape = 1) + # creating small circles around stars to make shape more interesting
  theme_void() + # setting to empty theme 
  coord_polar() + # organizing points in a circle 
  scale_color_brewer(palette = "PuBuGn") # setting to color scheme from R Color Brewer
```

## Exercise 2. Modifying polar_art() functiton 
```{r}
polar_art <- function(seed, n, palette) {
  
  set.seed(seed) # setting the state of the random number generator
  

  dat <- tibble( # creating data frame of random values
    x0 = runif(n), # creating random numbers for x0 column
    y0 = runif(n), # creating random numbers for y0 column
    x1 = x0 + runif(n, min = -1, max = 4), # creating random data for x1 column
    y1 = y0 + runif(n, min = -4, max = 2), # creating random data for y1 column
    shade = runif(n), # creating random data for shade column
    size = runif(n)) # size column random data 
  
  
  dat %>% # creating plot with data from random data frame
    ggplot(aes( # setting aesthetics for the plot 
      x = x0, # x-axis using data from x0 column 
      y = y0, # y-axis using data from y0 column
      xend = x1, # end of line segment on x-axis
      yend = y1, # end of line segment on y-axis
      colour = shade, # setting color to shade column
      linewidth = size, # setting line width to size column
    )) +
    geom_segment(show.legend = FALSE) + # plotting segments 
    coord_polar() + # organizing segments in circle
    scale_y_continuous(expand = c(0.3, 4)) + # customizing scale of y axis
    scale_x_continuous(expand = c(-1, 0)) + # customizing scale of x axis
    scale_colour_gradientn(colours = palette) + # setting colors to created palette 
    scale_size(range = c(-1, 1)) + # scaling lines to designated range of size
    theme_void() # setting minimalistic theme 
}

polar_art( # using polar_art function to generate art
  seed = 25, # setting seed 
  n = 100, # creating 100 lines
  palette = c("lavender", "cornflowerblue", "pink")
) # creating blue, pink, and lavender color palette 

```

## Exercise 3. Colors

```{r}
# calling simple_canva function to visualize outputs
sample_canva <- function(seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]]
}

show_col(sample_canva(seed = 41))
```

```{r}
# writing my own random palette generator
sample_named_colors <- function(n) { # creating a sample_named_colors that takes input n
  colors(distinct = TRUE) # using list of 502 colors
  return(sample(colors(distinct = TRUE), n, replace = FALSE)) # generates random sample of n colors from list
}


# running polar_art function with new function
polar_art(seed = 8, n = 30, palette = sample_named_colors(13))

```


```{r}
# creating vector of 600 distinct colors
colors_600 <- unlist(ggthemes::canva_palettes)

# creating palette generating function from set of 600
sample_600_colors <- function(seed = NULL, n = 4) { 
  if(!is.null(seed)) set.seed(seed) # using seed to randomly select colors
  sample(colors_600, 4) # generate random colors from vector
}

show_col(sample_600_colors(seed = 4, n = 4)) # testing function

```





